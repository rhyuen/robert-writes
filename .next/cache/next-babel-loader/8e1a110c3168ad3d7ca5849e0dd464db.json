{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nexport function getPostIds() {\n  const postsDirectory = path.join(process.cwd(), \"content\");\n  const fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map(f => {\n    return {\n      params: {\n        id: f.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport function getPostContent(id) {\n  const filePath = path.join(process.cwd(), \"content\", `${id}.md`);\n  const fileContent = fs.readFileSync(filePath);\n  const matterFileContent = matter(fileContent);\n  return _objectSpread({\n    content: matterFileContent.content\n  }, matterFileContent.data);\n}","map":{"version":3,"sources":["/mnt/c/Users/Robert/Desktop/wslcode/next/markdown_trois/lib/posts.js"],"names":["fs","path","matter","getPostIds","postsDirectory","join","process","cwd","fileNames","readdirSync","map","f","params","id","replace","getPostContent","filePath","fileContent","readFileSync","matterFileContent","content","data"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAO,SAASC,UAAT,GAAqB;AACxB,QAAMC,cAAc,GAAGH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,SAAzB,CAAvB;AACA,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeL,cAAf,CAAlB;AACA,SAAOI,SAAS,CAACE,GAAV,CAAcC,CAAC,IAAI;AACtB,WAAO;AACHC,MAAAA,MAAM,EAAE;AACJC,QAAAA,EAAE,EAAEF,CAAC,CAACG,OAAF,CAAU,OAAV,EAAmB,EAAnB;AADA;AADL,KAAP;AAKH,GANM,CAAP;AAOH;AAED,OAAO,SAASC,cAAT,CAAwBF,EAAxB,EAA2B;AAC9B,QAAMG,QAAQ,GAAGf,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,SAAzB,EAAqC,GAAEM,EAAG,KAA1C,CAAjB;AACA,QAAMI,WAAW,GAAGjB,EAAE,CAACkB,YAAH,CAAgBF,QAAhB,CAApB;AACA,QAAMG,iBAAiB,GAAGjB,MAAM,CAACe,WAAD,CAAhC;AACA;AACIG,IAAAA,OAAO,EAAED,iBAAiB,CAACC;AAD/B,KAEOD,iBAAiB,CAACE,IAFzB;AAIH","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\n\nexport function getPostIds(){\n    const postsDirectory = path.join(process.cwd(), \"content\");\n    const fileNames = fs.readdirSync(postsDirectory);\n    return fileNames.map(f => {\n        return {\n            params: {\n                id: f.replace(/\\.md$/, \"\")\n            }\n        };\n    });\n}\n\nexport function getPostContent(id){    \n    const filePath = path.join(process.cwd(), \"content\", `${id}.md`);\n    const fileContent = fs.readFileSync(filePath);\n    const matterFileContent = matter(fileContent);\n    return {\n        content: matterFileContent.content,\n        ...matterFileContent.data\n    };\n}"]},"metadata":{},"sourceType":"module"}